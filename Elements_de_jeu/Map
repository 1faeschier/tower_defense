package sample;

import javafx.animation.AnimationTimer;
import javafx.animation.KeyFrame;
import javafx.animation.Timeline;
import javafx.application.Application;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.scene.Scene;
import javafx.scene.canvas.Canvas;
import javafx.scene.canvas.GraphicsContext;
import javafx.scene.control.Button;
import javafx.scene.input.KeyEvent;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.*;
import javafx.scene.paint.Color;
import javafx.scene.shape.Line;
import javafx.scene.shape.Rectangle;
import javafx.scene.text.Font;
import javafx.stage.Stage;
import javafx.util.Duration;
import java.util.ArrayList;
import java.util.Iterator;

public class Map extends Application implements Iterable<Ennemie> {
    private int x = 1000;
    private int y = 110;
    ArrayList<Ennemie>listenemie = new ArrayList<>();
    ArrayList<Tower>listdefence = new ArrayList<>();
    Wave wave1 = new Wave();
    static int score = 10;
    static int count = 0;
    static int speed = 5;
    static boolean gameOver = false;
    static int height = 30;
    static int width = 50;
    static int cornersize = 20;
    static Position position;
    private Timeline timer;
    private int map = 1;
    private Way way;
    private BorderPane root;

    public Map(){
        super();
        timer = new Timeline(new KeyFrame(Duration.millis(50), new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent event) {
                for(Ennemie b: listenemie){
                    b.update();
                }
                for(Tower t : listdefence){
                    t.update();
                    System.out.println(listdefence.indexOf(t));
                }
            }
        }));
        timer.setCycleCount(Timeline.INDEFINITE);
        timer.play();

    }

    @Override
    public void start(Stage stage) {
        try {
            Canvas c = makeCanvas();
            GraphicsContext gc = c.getGraphicsContext2D();
            StackPane canvasHolder = new StackPane(c);
            root = new BorderPane(canvasHolder);


            new AnimationTimer() {
                long lastTick = 0;

                public void handle(long now) {
                    if (lastTick == 0) {
                        lastTick = now;
                        tick(gc);
                        return;
                    }
                    if (now - lastTick > 1000000000 / speed) {
                        lastTick = now;
                        tick(gc);
                    }
                }
            }.start();



            way = new Way();
            for (Line line : way.getWay(map)){
                root.getChildren().add(line);
            }
            listenemie = wave1.start(3);
            for (Ennemie e : listenemie){
                root.getChildren().add(e.getForme());
            }
            Tower tower = new Tower(new Position(500, 150));
            Tower tower1 = new Tower(new Position(300, 350));
            listdefence.add(tower);
            listdefence.add(tower1);
            root.getChildren().add(tower.getForme());
            root.getChildren().addAll(tower1.getForme());
            Scene scene = new Scene(root, width * cornersize, height * cornersize);
            stage.setScene(scene);
            stage.setTitle("Tower Defence Game");
            stage.show();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public Canvas makeCanvas(){
        Canvas c = new Canvas(width * cornersize, height * cornersize);
        c.setOnMouseClicked( this::mouseClicked );
        return c;
    }

    private void mouseClicked(MouseEvent mouseEvent) {
        int x = (int) mouseEvent.getX();
        int y = (int) mouseEvent.getY();
        if (x < 510 && x > 420 && y < 30) {
            start();
        }
        if (x < 610 && x > 550 && y < 30) {
            listdefence.add(new Tower(mouseClickedtower(mouseEvent)));
            root.getChildren().add(listdefence.get(listdefence.size()-1).getForme());
        }
    }
    private Position mouseClickedtower(MouseEvent mouseEvent){
        int x = (int) mouseEvent.getX();
        int y = (int) mouseEvent.getY();
        return new Position(x,y);
    }

    public static void tick(GraphicsContext gc){
        if (gameOver) {
            gc.setFill(Color.RED);
            gc.setFont(new Font("",50));
            gc.fillText("GAME OVER", 100,250);
        }

        gc.setFill(Color.GREEN);
        gc.fillRect(0,0,2000, 2000);

        gc.setFill(Color.WHITE);
        gc.setFont(new Font("",30));
        gc.fillText("Score:" + Player.score(score),10,30);

        gc.setFill(Color.WHITE);
        gc.fillText("start", 430, 30);

        gc.setFill(Color.WHITE);
        gc.fillText("Tour", 550, 30 );

        gc.setFill(Color.WHITE);
        gc.fillText("Wave: 1", 20, 500);

        gc.setFill(Color.WHITE);
        gc.fillText("Pause", 950, 40);

    }
    public static void create(){
        launch();
    }

    public void start(){
        for (Tower t : listdefence) {
            t.start(listenemie);
        }
        for (Ennemie e : listenemie){
            e.start(listenemie, way, map);
        }
    }

    @Override
    public Iterator<Ennemie> iterator() {
        return listenemie.iterator();
    }
}
